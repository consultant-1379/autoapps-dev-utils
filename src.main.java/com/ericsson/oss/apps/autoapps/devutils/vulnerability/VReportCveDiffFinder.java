/*******************************************************************************
 * COPYRIGHT Ericsson 2023 - 2024
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.apps.autoapps.devutils.vulnerability;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import com.ericsson.oss.apps.autoapps.devutils.FileUtils;

import lombok.experimental.UtilityClass;

@UtilityClass
public class VReportCveDiffFinder {
    public static Set<String> compileDeltaOfFoundCVEs(final String baselineFileName, final String updateFileName) throws IOException {
        final File baseline = FileUtils.getFile(baselineFileName);
        System.out.println("Baseline file:");
        final Set<String> baselineCVEs = findCVEs(baseline);
        System.out.println("Update file:");
        final var update = FileUtils.getFile(updateFileName);

        final Set<String> updateCVEs = findCVEs(update);
        System.out.println("Removing \n" + baselineCVEs + "\nfrom\n" + updateCVEs);
        updateCVEs.removeAll(baselineCVEs);
        System.out.println("New CVE's found:");
        //TODO create confluence-format table
        System.out.println(updateCVEs);
        updateCVEs.stream()
                .map(CVE -> String.format("https://www.suse.com/security/cve/%s.html", CVE))
                .forEach(System.out::println);
        return new HashSet(updateCVEs);
    }

    private static Set<String> findCVEs(final File vulnerabiltyReportFile) throws IOException {
        final Set<String> foundCVEs = new HashSet<>();
        try (final BufferedReader reader = Files.newBufferedReader(vulnerabiltyReportFile.toPath())) {
            foundCVEs.addAll(reader.lines()
                    .map(VReportCveDiffFinder::findCVEs)
                    .flatMap(Set::stream)
                    .collect(Collectors.toSet()));
            System.out.println(foundCVEs.size() + " CVE's in total");
        }
        return foundCVEs;
    }

    private static Set<String> findCVEs(final String line) {
        final Pattern cvePattern = Pattern.compile("CVE-202\\d-\\d+");
        final Matcher matcher = cvePattern.matcher(line);
        final Set<String> result = new HashSet<>();
        while (matcher.find()) {
            result.add(matcher.group());
        }

        return result;
    }
}

/*
 * CVE-2023-22043 CVE-2023-32181 CVE-2023-2283 CVE-2023-22652 CVE-2023-26604 CVE-2023-36191 CVE-2023-1667 CVE-2023-2975 CVE-2023-3603 CVE-2023-22051
 * CVE-2023-2804 CVE-2023-4016 CVE-2023-32643 CVE-2023-4156 CVE-2023-1255
 */